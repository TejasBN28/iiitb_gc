
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.12+45 (git sha1 UNKNOWN, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/iiitb_gc/src/iiitb_gc.v
Parsing SystemVerilog input from `/openlane/designs/iiitb_gc/src/iiitb_gc.v' to AST representation.
Generating RTLIL representation for module `\iiitb_gc'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/iiitb_gc/runs/RUN_2022.08.30_11.54.53/tmp/synthesis/hierarchy.dot'.
Dumping module iiitb_gc to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \iiitb_gc

3.2. Analyzing design hierarchy..
Top module:  \iiitb_gc
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \iiitb_gc

5.1.2. Analyzing design hierarchy..
Top module:  \iiitb_gc
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/iiitb_gc/src/iiitb_gc.v:29$1 in module iiitb_gc.
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\iiitb_gc.$proc$/openlane/designs/iiitb_gc/src/iiitb_gc.v:29$1'.
     1/1: $0\count[7:0]

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\iiitb_gc.\count' using process `\iiitb_gc.$proc$/openlane/designs/iiitb_gc/src/iiitb_gc.v:29$1'.
  created $dff cell `$procdff$15' with positive edge clock.

5.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\iiitb_gc.$proc$/openlane/designs/iiitb_gc/src/iiitb_gc.v:29$1'.
Removing empty process `iiitb_gc.$proc$/openlane/designs/iiitb_gc/src/iiitb_gc.v:29$1'.
Cleaned up 2 empty switches.

5.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.3. Executing FLATTEN pass (flatten design).

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module iiitb_gc...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_gc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_gc.
Performed a total of 0 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.7.9. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_gc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_gc.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$15 ($dff) from module iiitb_gc (D = $procmux$10_Y, Q = \count, rval = 8'00000000).
Adding EN signal on $auto$ff.cc:262:slice$16 ($sdff) from module iiitb_gc (D = $add$/openlane/designs/iiitb_gc/src/iiitb_gc.v:33$2_Y [7:0], Q = \count).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.9.9. Rerunning OPT passes. (Maybe there is more to do..)

5.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_gc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_gc.
Performed a total of 0 changes.

5.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

5.9.13. Executing OPT_DFF pass (perform DFF optimizations).

5.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..

5.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.9.16. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell iiitb_gc.$add$/openlane/designs/iiitb_gc/src/iiitb_gc.v:33$2 ($add).
Removed top 24 bits (of 32) from port Y of cell iiitb_gc.$add$/openlane/designs/iiitb_gc/src/iiitb_gc.v:33$2 ($add).
Removed top 24 bits (of 32) from wire iiitb_gc.$add$/openlane/designs/iiitb_gc/src/iiitb_gc.v:33$2_Y.

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module iiitb_gc:
  creating $macc model for $add$/openlane/designs/iiitb_gc/src/iiitb_gc.v:33$2 ($add).
  creating $alu model for $macc $add$/openlane/designs/iiitb_gc/src/iiitb_gc.v:33$2.
  creating $alu cell for $add$/openlane/designs/iiitb_gc/src/iiitb_gc.v:33$2: $auto$alumacc.cc:485:replace_alu$19
  created 1 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_gc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_gc.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.15.9. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

5.16.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..

5.16.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.16.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..

5.16.9. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_gc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_gc.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.20.10. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using template $paramod$c3cd1564c35d873179656addd6052d7ea8b6d991\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~241 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.
<suppressed ~43 debug messages>

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..
Removed 10 unused cells and 44 unused wires.
<suppressed ~11 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\iiitb_gc' to `<abc-temp-dir>/input.blif'..
Extracted 22 gates and 30 wires to a netlist network with 8 inputs and 14 outputs.

5.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:        3
ABC RESULTS:              NAND cells:        3
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        2
ABC RESULTS:              XNOR cells:        3
ABC RESULTS:               XOR cells:       10
ABC RESULTS:        internal signals:        8
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:       14
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..
Removed 0 unused cells and 25 unused wires.
<suppressed ~1 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \iiitb_gc

5.25.2. Analyzing design hierarchy..
Top module:  \iiitb_gc
Removed 0 unused modules.

5.26. Printing statistics.

=== iiitb_gc ===

   Number of wires:                 15
   Number of wire bits:             43
   Number of public wires:           5
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 30
     $_ANDNOT_                       3
     $_NAND_                         3
     $_NOT_                          1
     $_OR_                           2
     $_SDFFE_PP0P_                   8
     $_XNOR_                         3
     $_XOR_                         10

5.27. Executing CHECK pass (checking for obvious problems).
Checking module iiitb_gc...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/iiitb_gc/runs/RUN_2022.08.30_11.54.53/tmp/synthesis/post_techmap.dot'.
Dumping module iiitb_gc to page 1.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \iiitb_gc..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \iiitb_gc.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\iiitb_gc'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module iiitb_gc.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..

10. Printing statistics.

=== iiitb_gc ===

   Number of wires:                 15
   Number of wire bits:             43
   Number of public wires:           5
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 30
     $_ANDNOT_                       3
     $_NAND_                         3
     $_NOT_                          1
     $_OR_                           2
     $_SDFFE_PP0P_                   8
     $_XNOR_                         3
     $_XOR_                         10

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /home/tejasbn/Desktop/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/tejasbn/Desktop/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: /home/tejasbn/Desktop/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/tejasbn/Desktop/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

14. Executing SIMPLEMAP pass (map simple cells to gate primitives).

15. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

15.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\iiitb_gc':
  mapped 8 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

16. Printing statistics.

=== iiitb_gc ===

   Number of wires:                 31
   Number of wire bits:             59
   Number of public wires:           5
   Number of public wire bits:      19
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 46
     $_ANDNOT_                       3
     $_MUX_                         16
     $_NAND_                         3
     $_NOT_                          1
     $_OR_                           2
     $_XNOR_                         3
     $_XOR_                         10
     sky130_fd_sc_hd__dfxtp_2        8

[INFO]: USING STRATEGY AREA 0

17. Executing ABC pass (technology mapping using ABC).

17.1. Extracting gate netlist of module `\iiitb_gc' to `/tmp/yosys-abc-euPWJR/input.blif'..
Extracted 38 gates and 49 wires to a netlist network with 10 inputs and 15 outputs.

17.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-euPWJR/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-euPWJR/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-euPWJR/input.blif 
ABC: + read_lib -w /openlane/designs/iiitb_gc/runs/RUN_2022.08.30_11.54.53/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.09 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/iiitb_gc/runs/RUN_2022.08.30_11.54.53/tmp/synthesis/trimmed.lib" has 176 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.12 sec
ABC: Memory =    7.70 MB. Time =     0.12 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/iiitb_gc/runs/RUN_2022.08.30_11.54.53/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/iiitb_gc/runs/RUN_2022.08.30_11.54.53/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 65000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 65000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 65000 
ABC: Current delay (985.65 ps) does not exceed the target delay (65000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 65000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     39 ( 17.9 %)   Cap = 17.0 ff (  2.6 %)   Area =      330.32 ( 89.7 %)   Delay =  1292.62 ps  ( 15.4 %)               
ABC: Path  0 --       8 : 0    4 pi                      A =   0.00  Df =  78.3  -43.0 ps  S = 115.9 ps  Cin =  0.0 ff  Cout =  24.1 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      44 : 3    1 sky130_fd_sc_hd__and3_2 A =   7.51  Df = 255.3  -23.6 ps  S =  40.1 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 309.5 ff  G =  141  
ABC: Path  2 --      45 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df = 605.3 -158.5 ps  S = 437.9 ps  Cin =  2.1 ff  Cout =  37.1 ff  Cmax = 130.0 ff  G = 1679  
ABC: Path  3 --      57 : 4    1 sky130_fd_sc_hd__a31o_2 A =   8.76  Df = 811.8  -74.5 ps  S =  35.8 ps  Cin =  2.4 ff  Cout =   1.6 ff  Cmax = 271.9 ff  G =   64  
ABC: Path  4 --      58 : 3    1 sky130_fd_sc_hd__and3_2 A =   7.51  Df = 971.1  -11.3 ps  S =  40.1 ps  Cin =  1.5 ff  Cout =   2.2 ff  Cmax = 309.5 ff  G =  141  
ABC: Path  5 --      59 : 1    1 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1292.6 -118.3 ps  S = 396.5 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi7 (\count [1]).  End-point = po12 ($auto$rtlil.cc:2515:MuxGate$269).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   10/   15  lat =    0  nd =    39  edge =     95  area =330.37  delay = 5.00  lev = 5
ABC: + write_blif /tmp/yosys-abc-euPWJR/output.blif 

17.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        4
ABC RESULTS:     sky130_vsdinv cells:        3
ABC RESULTS:        internal signals:       24
ABC RESULTS:           input signals:       10
ABC RESULTS:          output signals:       15
Removing temp directory.

18. Executing SETUNDEF pass (replace undef values with defined constants).

19. Executing HILOMAP pass (mapping to constant drivers).

20. Executing SPLITNETS pass (splitting up multi-bit signals).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \iiitb_gc..
Removed 0 unused cells and 58 unused wires.
<suppressed ~2 debug messages>

22. Executing INSBUF pass (insert buffer cells for connected wires).

23. Executing CHECK pass (checking for obvious problems).
Checking module iiitb_gc...
Warning: Wire iiitb_gc.\gray_count [7] is used but has no driver.
Warning: Wire iiitb_gc.\gray_count [6] is used but has no driver.
Warning: Wire iiitb_gc.\gray_count [5] is used but has no driver.
Warning: Wire iiitb_gc.\gray_count [4] is used but has no driver.
Warning: Wire iiitb_gc.\gray_count [3] is used but has no driver.
Warning: Wire iiitb_gc.\gray_count [2] is used but has no driver.
Warning: Wire iiitb_gc.\gray_count [1] is used but has no driver.
Warning: Wire iiitb_gc.\gray_count [0] is used but has no driver.
Found and reported 8 problems.

24. Printing statistics.

=== iiitb_gc ===

   Number of wires:                 43
   Number of wire bits:             50
   Number of public wires:          11
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 47
     sky130_fd_sc_hd__a211o_2        1
     sky130_fd_sc_hd__a21oi_2        4
     sky130_fd_sc_hd__a31o_2         1
     sky130_fd_sc_hd__a41o_2         2
     sky130_fd_sc_hd__and2_2         3
     sky130_fd_sc_hd__and3_2         3
     sky130_fd_sc_hd__buf_1          4
     sky130_fd_sc_hd__dfxtp_2        8
     sky130_fd_sc_hd__nand2_2        1
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nor2_2         5
     sky130_fd_sc_hd__nor3_2         1
     sky130_fd_sc_hd__o211a_2        1
     sky130_fd_sc_hd__o21a_2         2
     sky130_fd_sc_hd__o21ba_2        1
     sky130_fd_sc_hd__or2_2          1
     sky130_fd_sc_hd__xnor2_2        1
     sky130_fd_sc_hd__xor2_2         4
     sky130_vsdinv                   3

   Chip area for module '\iiitb_gc': 500.480000

25. Executing Verilog backend.
Dumping module `\iiitb_gc'.

Warnings: 8 unique messages, 8 total
End of script. Logfile hash: 9859474997, CPU: user 0.48s system 0.03s, MEM: 27.52 MB peak
Yosys 0.12+45 (git sha1 UNKNOWN, gcc 8.3.1 -fPIC -Os)
Time spent: 42% 2x abc (0 sec), 18% 1x dfflibmap (0 sec), ...
